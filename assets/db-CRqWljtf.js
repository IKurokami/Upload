const l={editor:{name:"htmlEditorDB",version:1,stores:{htmlFiles:{keyPath:"id",autoIncrement:!0}}},ocr:{name:"ocrTool",version:1}},w=(t,o,a)=>new Promise((i,r)=>{const n=indexedDB.open(t,o);n.onupgradeneeded=e=>{const c=e.target.result;a(c)},n.onsuccess=e=>{i(e.target.result)},n.onerror=e=>{console.error("IndexedDB error:",e.target.error),r(e.target.error)}}),m=()=>w(l.editor.name,l.editor.version,t=>{t.objectStoreNames.contains("htmlFiles")||t.createObjectStore("htmlFiles",l.editor.stores.htmlFiles)}),p=()=>w(l.ocr.name,l.ocr.version,t=>{t.objectStoreNames.contains("config")||t.createObjectStore("config")}),B=async t=>{try{const o=await m();D(o,t)}catch(o){console.error("Failed to initialize database:",o),t([])}},D=(t,o)=>{const r=t.transaction(["htmlFiles"],"readonly").objectStore("htmlFiles").getAll();r.onsuccess=()=>{o(r.result)},r.onerror=()=>{console.error("Failed to load files from IndexedDB:",r.error),o([])}},j=async(t,o,a,i,r,n,e,c)=>{n(!0);try{const s=await m(),h=s.transaction(["htmlFiles"],"readwrite").objectStore("htmlFiles"),y=a==="chapter"?`${o} - ${t}`:i;if((await new Promise((u,x)=>{const d=h.getAll();d.onsuccess=()=>u(d.result),d.onerror=()=>x(d.error)})).some(u=>u.albumName===y)){n(!1),e({type:"error",text:"Album name already exists. Please choose a different name."}),setTimeout(()=>e(null),3e3);return}const F={albumName:y,imageUrls:r,createdAt:new Date().toISOString()},f=h.add(F);f.onsuccess=()=>{n(!1),e({type:"success",text:"Album saved successfully!"}),D(s,c),setTimeout(()=>e(null),3e3)},f.onerror=()=>{n(!1),e({type:"error",text:"Failed to save album."}),setTimeout(()=>e(null),3e3)}}catch(s){console.error("IndexedDB operation failed:",s),n(!1),e({type:"error",text:"IndexedDB operation failed."}),setTimeout(()=>e(null),3e3)}},I=async t=>{try{const r=(await p()).transaction(["config"],"readonly").objectStore("config").get(t);return new Promise((n,e)=>{r.onsuccess=()=>n(r.result),r.onerror=()=>e(r.error)})}catch(o){return console.error("Failed to get data from IndexedDB:",o),null}},T=async(t,o)=>{try{const n=(await p()).transaction(["config"],"readwrite").objectStore("config").put(o,t);return new Promise((e,c)=>{n.onsuccess=()=>e(),n.onerror=()=>c(n.error)})}catch(a){throw console.error("Failed to save data to IndexedDB:",a),a}},A=async t=>{try{const r=(await m()).transaction(["htmlFiles"],"readwrite").objectStore("htmlFiles").delete(t);return new Promise((n,e)=>{r.onsuccess=()=>n(),r.onerror=()=>e(r.error)})}catch(o){throw console.error("Failed to delete album from IndexedDB:",o),o}},P=async(t,o)=>{try{const r=(await m()).transaction(["htmlFiles"],"readwrite").objectStore("htmlFiles"),n=await new Promise((e,c)=>{const s=r.get(t);s.onsuccess=()=>e(s.result),s.onerror=()=>c(s.error)});if(!n)throw new Error("Album not found");return n.albumName=o,new Promise((e,c)=>{const s=r.put(n);s.onsuccess=()=>e(),s.onerror=()=>c(s.error)})}catch(a){throw console.error("Failed to rename album in IndexedDB:",a),a}},q=(t,o,a,i)=>{const r=t.length>0?t.map(b=>`<img src="${b}" alt="" ${a?'loading="lazy"':""}>`).join(`
`):o,n=`<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${i}</title>
  <style>
    body { background: #f2f2f2; padding: 20px; display: flex; flex-direction: column; align-items: center; }
    img { max-width: 100%; height: auto; object-fit: contain; object-position: top center;}
  </style>
</head>
<body class="container">
  ${r}
</body>
</html>`,e=new Blob([n],{type:"text/html"}),c=URL.createObjectURL(e),s=document.createElement("a");s.href=c,s.download=i,document.body.appendChild(s),s.click(),setTimeout(()=>{document.body.removeChild(s),URL.revokeObjectURL(c)},100)};export{I as a,A as d,q as g,B as i,m as o,P as r,T as s,j as u};
